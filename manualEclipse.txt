****************************************************************************************************************************

****************************************************************************************************************************
Open IDE Eclipse
New Project
Spring boot -> spring starter

Service URL
https://start.spring.io

Name
petshop

Use default location
Location
C:\Users\Aluno\eclipse-workspace\petshop

Type:
Maven

Packaging:
Jar

Java Version:
17

Language:
Java

Group
com.devsenai2A.petshop

Artifact
petshop

Version
0.0.1-SNAPSHOT

Description
Demo project for petshop

Package
com.devsenai2A.petshop

import
spring boo devtools
spring data jpa
mysql driver
spring web


start the file


then click on https://maven.apache.org  and force it 
run as:

9th option: spring boot app

open pom.xml

comment:
<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>-->
</dependency>
		<!--<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>-->

save all

********************************************************************************************************************************************************************************************************************************************************

package com.devsenai2A.petshop;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class PetshopApplication {

	public static void main(String[] args) {
		SpringApplication.run(PetshopApplication.class, args);
		
		
				
			}
	@RestController
	static class HelloWorldController{
		@GetMapping("/")
		public String helloWorld() {
			return "hello world";
		
	
		}
	}
}

********************************************************************************************************************************************************************************************************************************************************

1) 

O Spring Boot é uma extensão do Spring Framework que visa simplificar a configuração e o desenvolvimento de aplicações Spring. Ele oferece uma maneira mais rápida de criar e configurar aplicativos Spring com o mínimo de configuração manual.

Vantagem principal: O Spring Boot elimina a necessidade de configurar arquivos XML (Extansable Markup Language - armazena dados utilizando tags) complexos, como o `web.xml`, e proporciona configurações automáticas, inicializando a aplicação com configurações padrão sensatas (autoconfiguração). Isso acelera o desenvolvimento, pois você pode começar a trabalhar rapidamente, sem se preocupar com detalhes de configuração.

 2)

O pom.xml (Project Object Model) é o arquivo de configuração do Maven, uma ferramenta de gerenciamento de dependências e construção de projetos. Ele descreve o projeto, suas dependências (bibliotecas externas), plugins de construção e configurações de build. É essencial para que o Maven saiba como construir o projeto e gerenciar suas dependências.

 3) 

O Maven gerencia dependências através do pom.xml. Quando você adiciona uma dependência no arquivo, o Maven busca essa dependência em repositórios (como o Maven Central) e a adiciona ao classpath do projeto. Ele também resolve transitive dependencies, ou seja, se uma biblioteca depende de outras bibliotecas, o Maven automaticamente as inclui.

 4) 

A dependência spring-boot-devtools oferece funcionalidades de desenvolvimento para melhorar a experiência do desenvolvedor. Ela inclui:

 Hot swapping: Quando você altera uma classe, o Spring Boot recarrega automaticamente o contexto da aplicação sem precisar reiniciar o servidor.
 Reinício automático: Reinicia automaticamente a aplicação quando mudanças são feitas em arquivos de código.
 Melhorias de logging: Exibe informações detalhadas para depuração durante o desenvolvimento.

 5) 

 spring-boot-starter-web: É um starter que inclui as dependências necessárias para construir aplicações web, incluindo suporte para REST APIs com Spring MVC, Tomcat (ou outro servidor web), e Jackson para conversão JSON.

 spring-boot-starter-data-jpa: Este starter adiciona dependências para integrar o Spring com o JPA (Java Persistence API). Ele facilita o uso de bancos de dados relacionais e mapeamento objeto-relacional (ORM), usando o Hibernate como implementação JPA.

 6) No arquivo `application.properties` ou `application.yml`, você configura as propriedades necessárias para a conexão com o banco de dados. Exemplos:

application.properties:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
```

application.yml:

```yaml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
```

 7) 
 @RestController: É uma combinação de `@Controller` e `@ResponseBody`, ou seja, ela indica que os métodos da classe retornam diretamente o corpo da resposta (geralmente em formato JSON ou XML) e não uma visão (como um JSP ou Thymeleaf).

 @Controller: É usada para definir controladores que respondem a requisições e retornam uma view (como HTML), ou seja, um modelo de resposta mais tradicional.

 8)
A anotação @GetMapping("/") mapeia uma requisição HTTP GET para o método de um controlador. O valor `"/"` indica que o método deve ser chamado quando a URL raiz (por exemplo, `http://localhost:8080/`) for acessada. O método anotado com `@GetMapping` pode retornar um texto, JSON, ou uma página HTML, dependendo do tipo de resposta esperado.

 9) 
O método SpringApplication.run() é o ponto de entrada para a aplicação Spring Boot. Ele inicia o contexto da aplicação Spring, carrega as configurações e as dependências, e começa o servidor embutido (como Tomcat ou Jetty). Basicamente, é o que inicia o ciclo de vida da aplicação Spring Boot.

```java
public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
}
```

 10) 
O Spring Data JPA abstrai o uso do JPA (Java Persistence API), oferecendo uma interface mais simples para interação com o banco de dados. Em vez de escrever consultas SQL ou JPQL diretamente, você pode usar repositórios que são automaticamente implementados pelo Spring. O Spring Data JPA também suporta consultas personalizadas e páginas de dados (paginação e ordenação) com facilidade.

 11)
Para o Spring Boot funcionar com o MySQL, você precisa:

1. Incluir a dependência do Spring Data JPA e o driver do MySQL no `pom.xml`:

   ```xml
   <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-data-jpa</artifactId>
   </dependency>
   <dependency>
       <groupId>mysql</groupId>
       <artifactId>mysql-connector-java</artifactId>
   </dependency>
   ```

2. Configurar as propriedades de conexão no `application.properties` ou `application.yml`.

3. Criar uma classe de modelo (entidade) JPA e um repositório (interface) estendendo `JpaRepository`.

 12) 
A injeção de dependência no Spring Boot funciona através do IoC (Inversion of Control). O Spring gerencia a criação e o ciclo de vida dos objetos e os injeta automaticamente onde necessário, usando a anotação `@Autowired`. Você pode injetar componentes como serviços, repositórios ou controladores diretamente nos outros componentes do Spring.

Exemplo:

```java
@Autowired
private MeuServico meuServico;
```

 13) 
Quando você faz uma requisição GET para o endpoint `/` de um `@RestController`, o Spring vai chamar o método do controlador mapeado para esse endpoint. O Spring trata a requisição, executa a lógica do método e retorna uma resposta (geralmente em formato JSON). O método pode retornar dados ou apenas uma mensagem, dependendo da implementação.

 14) 
O Spring Boot DevTools oferece diversos benefícios, como:

 Reinício automático: Sempre que você faz alterações no código, o Spring Boot DevTools reinicia automaticamente a aplicação.
 Hot swapping: Permite atualizar partes da aplicação sem precisar reiniciar o servidor.
 Melhoria no debug: Exibe logs detalhados, facilitando o processo de depuração.
 Desativação de cache de templates: Durante o desenvolvimento, ele desativa o cache para que alterações nos templates sejam refletidas imediatamente.

 15) Cite uma situação em que você precisaria criar um endpoint REST com @GetMapping e retornar dados do banco com JPA. Como isso seria implementado?

Suponha que você tenha uma tabela `Produto` no banco de dados e queira criar um endpoint que retorne todos os produtos em formato JSON.

1. Entidade Produto:

   ```java
   @Entity
   public class Produto {
       @Id
       @GeneratedValue(strategy = GenerationType.IDENTITY)
       private Long id;
       private String nome;
       private double preco;
   }
   ```

2. Repositório Produto:

   ```java
   @Repository
   public interface ProdutoRepository extends JpaRepository<Produto, Long> {
   }
   ```

3. Controlador:

   ```java
   @RestController
   @RequestMapping("/produtos")
   public class ProdutoController {

       @Autowired
       private ProdutoRepository produtoRepository;

       @GetMapping("/")
       public List<Produto> getProdutos() {
           return produtoRepository.findAll();
       }
   }
   ```

Esse código cria um endpoint `/produtos/` que retorna todos os produtos no banco de dados em formato JSON.
